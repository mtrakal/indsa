komuniakce - hrany
body styku - vrcholy
k - postižená silnice, dostat tam vozidlo
vypoèítat optimální trajektorii do místa K. Musíme vyšetøit obì možnosti pøístupu (z obou stran)
každá silnice má pøíznak metrické délky. Metricky nejkratší cesta = optimální cesta do cíle
výsledkem je Trajektorie pøemístìní (2 varianty, nejlepší musí být ta kratší)

Omezující podmínky:
  množina komunikací, která nená udržována a jsou nesjízdné
  
Vstupy: výchozí poloha vozu, cílová komunikace, množina komunikací, které jsou nesjízdné
Výstup: optimální trajektorie

Primární požadavek komunikace: musí být identifikována alfanumerickým identifikátorem (nesmí být duplicitní) - primární klíè
Sekundární: definovat komunikaci alternativním zpùsobem, pomocí koordinátù krajních bodù komunikace

BackgroundWorker - hledání cesty v threadu

Buï grafem + datová struktura graf z datovek


Efektivný dynamický výpoèet: vždy hledáme dynamicky pro zadané vstupní parametry. Spoleènì definujeme parametry (poèátek, parametry, nesjízdné) a musíme najít cestu. Efektivní: bude sledovat jakou datovou strukturu jsme použili a jaký algoritmus je naprogramován a jak nad DS bude pracovat.

Požadavky na aplikaci:
  po spuštìní zobrazení menu, vybrání základních funkcí.
  Algoritmus: definování vstupù/stream a spoèítání trajektorie
  Vyhledávání komunikací dle primárního klíèe.
  Realizace vkládní a odebírání komunikací - není potøeba efektivní vkládání /odebrání komunikace - pøerovnání stromu


String, int, int, int, int, int, bool
Silnice: Název; X1; Y1; X2; Y2; ohodnocení; sjízdná;

bankomaty, gps koordináty, vlakový podklad

Musíme brát pøesnou polohu poèátku automobilu, musíme zapoèítat jeho vzdálenost

Identifikace polohy na hranì


Zadá hranu a polohu. Najít hranu, zjistit délku, posuvník s km vzdáleností a zadat polohu od bodu X1,Y1.

  

http://www.cs.berkeley.edu/~vazirani/algorithms/chap4.pdf
http://www.cs.brown.edu/courses/cs141/amy_notes/graphs.pdf


prior vyhl. strom ()
+ prior fronta
+ pøedìlat dijkstru

dijkstra: jak vybrat efektivnì nejmenší ohodnocení, prior fronta

implementace grafu: 

+ ohodnocení (hrany) mùžeme zadat vlastní



- na B: pøístupový index


prior fronta + halda?

------------- Dokumentace
popsat dat struktury
algoritmus pro cestu a úpravy
nìco o strukturøe implementaèní èásti (diagram tøíd)
odstavec specifického s implementací

odevzdat do stagu

sortedDictionary

Pokud prohledávám prior frontu, vyøešit aby se znova nehledalo znova cesty s horším ohodnocením.
Nebo použít nìco jinýho.

-- zdroje
http://kam.mff.cuni.cz/~kuba/ka/
http://kam.mff.cuni.cz/~kuba/ka/halda.pdf
http://cs.wikipedia.org/wiki/Dijkstr%C5%AFv_algoritmus
http://ww3.algorithmdesign.net/handouts/Heap.pdf
https://docs.google.com/viewer?a=v&q=cache:npw0BxnC_K8J:www.kiv.zcu.cz/~netrvalo/vyuka/ppa2-08/prednasky/prednaska08.doc+&hl=cs&gl=cz&pid=bl&srcid=ADGEESg6OIc6f-U3U-6yXTZ2tv6VdR9N7cngEEiY4e6tnHK7KXMtl_0Jc3cMWsDChLOH4S_dv6imAjO-XIxzoniv-2vS2epVcZUczh8cpU0RThlrIx1yR3CfL9Xfo5YWUcbSk3ldcsJM&sig=AHIEtbQDIF9vTai6shw4Qp8KccM2Gdsang
http://stackoverflow.com/questions/1937690/c-sharp-priority-queue
https://docs.google.com/viewer?a=v&q=cache:BI4DrpWRSicJ:www2.cs.siu.edu/~mengxia/Courses%2520PPT/220/carrano_ppt18.ppt+&hl=cs&gl=cz&pid=bl&srcid=ADGEESjYg4oJKq0SjNOwGHSxMn07ohbApsHUTQVVQO0y9mTpLbxHkim7Qyn4UQToB_66od2wOCahJgrgWoXwnbQH7MHuaojx0gyhrpoqkGXkQuNYQTrKEc6MbohV9k93WwzDWMGxCuOT&sig=AHIEtbR8b8McwZIOV5ScV_knVWhbJPN8iQ
http://www.avk.name/2010/11/priority-queue-in-c-with-help-of-heap.html
http://www.devsource.com/c/a/Languages/A-Priority-Queue-Implementation-in-C/
http://www.codeproject.com/Articles/13295/A-Priority-Queue-in-C
http://voho.cz/wiki/informatika/algoritmus/graf/dijkstra/
